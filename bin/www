#!/usr/bin/env node
/* Module dependencies */
var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
var https = require('https');
var ssl = require('../sslLicense');
var mongoose = require( 'mongoose' );
var Room = mongoose.model('room');

/**
 * Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('httpsport', '3001');


/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var httpsServer = https.createServer(ssl.options, app).listen(app.get('httpsport'));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,console.log("****************server start port:"+port+"*********************"));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

//socket server
var io = require('socket.io')(httpsServer);
var user_count = 0;


//當新的使用者連接進來的時候
io.on('connection', function(socket){

	//新user
	socket.on('add user',function(msg){
		socket.user = msg;
		console.log("socket.user",socket.user);
		console.log("new user:"+socket.user.name+" logged.");
		addRoom(socket.user);
		io.emit('add user',{
			username: socket.user.name
		});
	});

	//監聽新訊息事件
	socket.on('chat message', function(msg){

		console.log("meg",socket.user.name+":"+msg);

  		//發佈新訊息
		io.emit('chat message', {
			username:socket.user.name,
			msg:msg
		});
	});

	//left
	socket.on('disconnect',function(){
		if(!socket.user) return console.log("server reboot");
		console.log(socket.user.name+" left.");
		leftRoom(socket.user);
		io.emit('user left',{
			user:socket.user
		});
	});
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function leftRoom(user){
	var obj = {
		room:user.room,
		email:user.email
	}
	Room.remove(obj,function( err, data, count ){
		if(err){
			console.log(err);
		}else{
			console.log("del room ok",user.email);
		}
	});
}

function addRoom(user){
	user.updated_at = Date.now();
	Room(user).save( function( err, data, count ){
		if(err){
			console.log(err);
		}else{
			console.log("add room",data);
		}
	});
}